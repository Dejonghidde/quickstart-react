/// <reference types="node" />
/// <reference types="node" />
import path from 'node:path';
export declare const readFileData: (filePath: string) => Buffer;
export declare const readZipFileAsBuffer: (filePath: string) => Buffer;
/**
 * Decompress a ZIP buffer and extract files to the output directory.
 * @param buffer - The ZIP buffer.
 * @param outputDir - The directory where files should be extracted.
 */
export declare const decompressZipBufferToFiles: (buffer: Buffer, outputDir: string) => Promise<void>;
export declare const compressFilesToZip: (files: {
    path: string;
    replaceName?: string;
}[]) => Promise<string>;
export declare const compressBuildToZip: (dirPath: string) => Promise<string>;
export declare const verifyClientDirectory: (directoryPath: string) => void;
export declare const checkIfFileExists: (filePath: string) => boolean;
export declare const getFileExtension: (filePath: string) => string;
export declare const createTarGzArchive: (directoryPath: string, fileName?: string) => Promise<string>;
export declare const createGitignoreAndAppendConfigFileIfNeeded: (directoryPath: string, fileName?: string) => void;
/**
 * Detect if the project is yarn project with a build step
 * if so, we will need to abort the build process as
 * gcloud buildpacks does not support it yet
 * @param directoryPath the path where the project is located
 * @throws Error if the project is yarn project with a build step
 * @returns void
 **/
export declare const validateIfCanBuild: (directoryPath: string) => void;
/**
 * Writes a buffer to a file at the specified path.
 * @param filePath - The path where the file will be created.
 * @param dataBuffer - The buffer containing the file data.
 */
export declare const writeBufferToFile: (filePath: string, dataBuffer: Buffer) => void;
