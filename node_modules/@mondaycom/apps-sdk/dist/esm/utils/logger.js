var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { LogMethods } from '../types/logger.js';
var defaultOptions = {
    mondayInternal: true
};
var Logger = /** @class */ (function () {
    /**
     * @param tag - Will be added to every logged message
     * @param {Options} options
     */
    function Logger(tag, options) {
        if (options === void 0) { options = {}; }
        this.tag = tag;
        this.options = __assign(__assign({}, defaultOptions), options);
    }
    Logger.prototype.logMessage = function (severity, message, options) {
        var _a;
        var logOptions = __assign(__assign({}, this.options), options);
        console.log(JSON.stringify(__assign(__assign({ severity: severity, tag: this.tag, message: message }, logOptions), logOptions.error && { stack: (_a = logOptions.error) === null || _a === void 0 ? void 0 : _a.stack })));
    };
    Logger.prototype.debug = function (message, options) {
        this.logMessage(LogMethods.DEBUG, message, options);
    };
    Logger.prototype.error = function (message, options) {
        this.logMessage(LogMethods.ERROR, message, options);
    };
    Logger.prototype.warn = function (message, options) {
        this.logMessage(LogMethods.WARNING, message, options);
    };
    Logger.prototype.info = function (message, options) {
        this.logMessage(LogMethods.INFO, message, options);
    };
    return Logger;
}());
export { Logger };
//# sourceMappingURL=logger.js.map